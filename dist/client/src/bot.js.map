{"version":3,"file":"bot.js","sourceRoot":"","sources":["../../../../client/src/bot.ts"],"names":[],"mappings":"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","sourcesContent":["import { Engine } from \"./engine\";\r\nimport { IChessboard } from \"./engine\";\r\nimport { Move } from \"./engine\";\r\nimport {sleep} from \"./utility\";\r\n\r\ntype Color = \"black\" | \"white\";\r\ntype Side = \"top\" | \"bot\";\r\ntype Combo = {\r\n    route: number[], \r\n    playerScore: number,\r\n    botScore: number,\r\n    board: IChessboard,\r\n    color: Color,\r\n    scoreDiff: number,\r\n    finish?: boolean,\r\n    prev?: Combo,\r\n    next?: Combo,\r\n}\r\n\r\ntype simulatedMove = {\r\n    move: Move,\r\n    board: IChessboard,\r\n    diff: number,\r\n    prev: null | simulatedMove,\r\n    prediction?: number,\r\n}\r\n\r\nexport default class Bot {\r\n\r\n    engine: Engine;\r\n\r\n    scoreSheet: number[];\r\n    color: Color;\r\n    playerColor: Color;\r\n\r\n    constructor(engine: Engine, color: Color) {\r\n        this.engine = engine;\r\n        this.color = color;\r\n        this.playerColor = this.color == \"white\" ? \"black\" : \"white\";\r\n        this.scoreSheet = getScoreSheet();\r\n    }\r\n\r\n    async makeMove(chessboard: IChessboard) {\r\n        this.engine.playerSide = \"top\";\r\n        let moves = this.findBestMoves(chessboard, this.color);\r\n        let move = moves[Math.floor(Math.random() * moves.length)];\r\n        if (move) {\r\n            let shouldQueen = this.engine.shouldMakeQueen(move.move, chessboard)\r\n            if (shouldQueen) {\r\n                this.engine.makeQueen(move.move, chessboard);\r\n            }\r\n            this.engine.move(move.piece, move.move, chessboard);\r\n            this.engine.dispatchEvent();\r\n            if (move.kill) {\r\n                this.engine.kill(move.kill, chessboard);\r\n                let routes = this.engine.getLongestRoutes([move.move], this.color, chessboard, \"top\");\r\n                if (routes.some((route) => route.length > 1)) {\r\n                    await sleep(1000);\r\n                    this.makeMove(chessboard);\r\n                    this.engine.dispatchEvent();\r\n                } else {\r\n                    this.engine.turn = this.playerColor;\r\n                    this.engine.dispatchEvent();\r\n                }\r\n            } else {\r\n                this.engine.turn = this.playerColor;\r\n                this.engine.dispatchEvent();\r\n            }\r\n\r\n        }\r\n        this.engine.playerSide = \"bot\";\r\n    }\r\n\r\n    findBestMoves(chessboard: IChessboard, color: Color) {\r\n        let engine = this.engine\r\n        let opponentColor: Color = color == \"white\" ? \"black\" : \"white\";\r\n\r\n        // When bot has kill he figuers up which killing combo is the best\r\n        let board = JSON.parse(JSON.stringify(chessboard));\r\n        let combos = this.doComboSequence(board, color, \"top\");\r\n        if (combos.length > 0) {\r\n            return this.getMovesFromCombos(combos, board, color);\r\n        }\r\n\r\n        // When bot needs to make normal move he simulates each every possible move nad checking\r\n        // consequences\r\n        board = JSON.parse(JSON.stringify(chessboard));\r\n        let possibleMoves = engine.getAllMoves(board, color, \"top\");\r\n        let simulatedMoves = this.simulateMove(possibleMoves, board, color, \"top\");\r\n        let bestMoves = this.getBestMoves(simulatedMoves);\r\n        let moves = bestMoves.map((move) => move.move);\r\n        return moves;\r\n    }\r\n\r\n    // returns moves that have highest .prediction attribute that is above 1. If none of them have .prediction\r\n    // above 1 it picks move with highest .diff (botScore - playerScore).\r\n    getBestMoves(simulatedMoves: simulatedMove[]) {\r\n        let bestScore = Number.NEGATIVE_INFINITY;\r\n        let bestMoves: simulatedMove[] = [];\r\n        for (let move of simulatedMoves) {\r\n            let score;\r\n            if (move.prediction) {\r\n                score = move.prediction\r\n            } else {\r\n                score = move.diff;\r\n            }\r\n           if (score > bestScore) {\r\n               bestScore = score;\r\n               bestMoves = [move]\r\n           } else if (score == bestScore) {\r\n               bestMoves.push(move);\r\n           }\r\n        }\r\n       \r\n        return bestMoves;\r\n    }\r\n\r\n    getMovesFromCombos(combos: Combo[], chessboard: IChessboard, color: Color) {\r\n        let finishCombos = combos.filter((combo) => combo.finish == true);\r\n            let bestCombos = this.getBestCombos(finishCombos);\r\n            let originalRoutes = this.getOriginalRoutesFromCombos(bestCombos);\r\n            let moves = this.getFirstMovesFromRoutes(originalRoutes, chessboard, color, \"top\");\r\n            return moves;\r\n    }\r\n\r\n\r\n    \r\n    simulateMove(moves: Move[], chessboard: IChessboard, color: Color, side: Side) {\r\n\r\n        let opponentSide: Side = side == \"top\" ? \"bot\" : \"top\";\r\n        let opponentColor: Color = color == \"white\" ? \"black\" : \"white\";\r\n        let simulatedMoves = [];\r\n        for (let move of moves) {\r\n            let board: IChessboard = JSON.parse(JSON.stringify(chessboard));\r\n            this.engine.move(move.piece, move.move, board);\r\n            let playerScore = this.getScore(board, this.playerColor, 'bot');\r\n            let botScore = this.getScore(board, this.color, 'top');\r\n            let diff = botScore - playerScore;\r\n            let pushed: simulatedMove = {move: move, board: board, diff: diff, prev: null}\r\n            simulatedMoves.push(pushed);\r\n\r\n            \r\n\r\n            // PLAYER MOVES\r\n            let combos = this.doComboSequence(board, opponentColor, opponentSide);\r\n            if (combos.length > 0) {\r\n                \r\n                let worstCombos = this.getWorstCombos(combos);\r\n                pushed.prediction = worstCombos[0].scoreDiff;\r\n            }\r\n\r\n        }\r\n        return simulatedMoves;\r\n    }\r\n\r\n    getFirstMovesFromRoutes(routes: number[][], chessboard: IChessboard, turn: Color, side: Side) {\r\n        let firstMoves = [];\r\n        for (let route of routes) {\r\n            let piece = route[0];\r\n            let moveId = route[1];\r\n            let moves = this.engine.getMoves(piece, chessboard, turn, side);\r\n            let move = this.engine.getMove(moveId, moves);\r\n            firstMoves.push(move);\r\n        }\r\n        return firstMoves;\r\n    }\r\n\r\n    getOriginalRoutesFromCombos(combos: Combo[]) {\r\n        let routes = [];\r\n        for (let combo of combos) {\r\n            let current = combo;\r\n                while (true) {\r\n                    if (!current.prev) {\r\n                        routes.push(current.route);\r\n                        break;\r\n                    } else {\r\n                        current = current.prev;\r\n                    }\r\n                }\r\n        }\r\n        return routes;\r\n    }\r\n\r\n    getBestCombos(combos: Combo[]) {\r\n        let best: Combo[] = [];\r\n        let highestDiff = Number.NEGATIVE_INFINITY;\r\n        for (let combo of combos) {\r\n            if (combo.scoreDiff > highestDiff) {\r\n                highestDiff = combo.scoreDiff;\r\n                best = [combo];\r\n            } else if (combo.scoreDiff == highestDiff) {\r\n                best.push(combo);\r\n            }\r\n        }\r\n        return best;\r\n    }\r\n    getWorstCombos(combos: Combo[]) {\r\n        let worst: Combo[] = [];\r\n        let lowestDiff = Infinity;\r\n\r\n        let lastCombos = this.getLastCombos(combos);\r\n        \r\n        for (let combo of lastCombos) {\r\n            if (combo.scoreDiff < lowestDiff) {\r\n                if (combo.next) \r\n                lowestDiff = combo.scoreDiff;\r\n                worst = [combo];\r\n            } else if (combo.scoreDiff == lowestDiff) {\r\n                worst.push(combo);\r\n            }\r\n        }\r\n        return worst;\r\n    }\r\n\r\n    getLastCombos(combos: Combo[]) {\r\n        let lastCombos = combos.map((combo) => {\r\n            let current = combo;\r\n            let counter = 0;\r\n            while (current.next) {\r\n                counter ++;\r\n                if (counter > 20) {\r\n                    break;\r\n                }\r\n                if (current.next) {\r\n                    current = current.next\r\n                }\r\n            }\r\n            return current;\r\n        })\r\n        return lastCombos;\r\n    }\r\n\r\n    doComboSequence(chessboard: IChessboard, color: Color, side: Side ) {\r\n\r\n        let opponentColor: Color = color == \"white\" ? \"black\" : \"white\";\r\n\r\n        let allCombos: Combo[] = []\r\n\r\n        let board = JSON.parse(JSON.stringify(chessboard));\r\n        let combos = this.doCombo(board, color, side, color);\r\n        allCombos = allCombos.concat(combos); \r\n            combos.forEach((combo) => {\r\n                let board = combo.board;\r\n                board = JSON.parse(JSON.stringify(board));\r\n                let combos2 = this.doCombo(board, opponentColor, side, opponentColor);\r\n                if (combos2.length == 0) {\r\n                    combo.finish = true;\r\n                }\r\n                allCombos = allCombos.concat(combos2);\r\n                combos2.forEach((combo2) => {\r\n                    combo.next = combo2;\r\n                    combo2.prev = combo;\r\n                    let board = combo2.board;\r\n                    board = JSON.parse(JSON.stringify(board))\r\n                    let combos3 = this.doCombo(board, color, side, color);\r\n                    if (combos3.length == 0) {\r\n                        combo2.finish = true;\r\n                    }\r\n                    combos3.forEach((combo3) => {\r\n                        combo3.prev = combo2; \r\n                        combo2.next = combo3;\r\n                        combo3.finish = true});\r\n                    allCombos = allCombos.concat(combos3);\r\n            })\r\n        })\r\n\r\n    return allCombos;\r\n}\r\n\r\n\r\n    doCombo(chessboard: IChessboard, turn: Color, side: Side, color: Color) {\r\n        let engine = this.engine;\r\n        let board = JSON.parse(JSON.stringify(chessboard));\r\n        let killMoves = engine.getAllMovesWithKill(board, turn, side);\r\n        let combos: Combo[] = [];\r\n        let routes = engine.getLongestRoutes(killMoves, turn, board, side);\r\n        let boards: IChessboard[] = [];\r\n        for (let i = 0; i < routes.length; i++) {\r\n            board = JSON.parse(JSON.stringify(chessboard));\r\n            boards.push(this.moveAlongRoute(routes[i], board, side, color));\r\n            let botScore = this.getScore(boards[i], this.color, \"top\");\r\n            let playerScore = this.getScore(boards[i], this.playerColor, \"bot\");\r\n            combos.push({\r\n                route: routes[i],\r\n                playerScore: playerScore,\r\n                botScore: botScore,\r\n                board: boards[i],\r\n                color: turn,\r\n                scoreDiff: botScore - playerScore,\r\n                finish: false,\r\n            })\r\n        }\r\n        return combos;\r\n    }\r\n\r\n    moveAlongRoute(route: number[], chessboard: IChessboard, side: \"top\" | \"bot\", color: Color) {\r\n        let engine = this.engine\r\n        let current = route[0];\r\n        let routeCopy = route.slice(0);\r\n        while (routeCopy.length > 1) {\r\n            let next = routeCopy[1];\r\n            let moves = engine.getMoves(current, chessboard, color, side);\r\n            let move = engine.getMove(next, moves);\r\n\r\n            if (move) {\r\n                engine.move(current, move.move, chessboard);\r\n                if (move.kill) {\r\n                    chessboard = engine.kill(move.kill, chessboard);\r\n                }\r\n            }\r\n            routeCopy.shift();\r\n            current = routeCopy[0];\r\n        }\r\n        return chessboard;\r\n    }\r\n\r\n    getScore(chessboard: IChessboard, color: Color, side: \"top\" | \"bot\") {\r\n        let scoresheet = this.scoreSheet.slice(0);\r\n        scoresheet = side == \"top\" ? this.scoreSheet : scoresheet.reverse();\r\n\r\n        let sum = 0;\r\n        for (let i = 0; i < scoresheet.length; i++) {\r\n            if (chessboard[i][\"queen\"] && chessboard[i][\"piece\"] == color) {\r\n                sum += 25;\r\n            } else if (chessboard[i][\"piece\"] == color) {\r\n                sum += scoresheet[i];\r\n            }\r\n        }\r\n        return sum;\r\n    }\r\n}\r\n\r\nfunction getScoreSheet() {\r\n    let scoreSheet = [10,  10,  10,  10,  10,  10,  10,  10,\r\n                      11,  12,  12,  12,  12,  12,  12,  11,\r\n                      13,  14,  14,  14,  14,  14,  14,  13,\r\n                      15,  16,  16,  16,  16,  16,  16,  15,\r\n                      17,  18,  18,  18,  18,  18,  18,  17,\r\n                      18,  19,  19,  19,  19,  19,  19,  18,\r\n                      20,  21,  21,  21,  21,  21,  21,  20, \r\n                      24,  25,  25,  25,  25,  25,  25,  24] \r\n    return scoreSheet;\r\n}\r\n\r\n"]}